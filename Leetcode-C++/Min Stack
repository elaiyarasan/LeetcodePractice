/**
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
**/
class MinStack {
    vector<int> stack;
    int min=INT_MAX;
public:
    void push(int x) {
        stack.push_back(x);
        if(x<min)
        min=x;
    }

    void pop() {
        if(stack[stack.size()-1]==min)
        {
            int secondmin=INT_MAX;
            for(int i=0;i<stack.size()-1;i++)
            {
                if(secondmin>stack[i])
                {
                    secondmin=stack[i];
                }
            }
            min=secondmin;
        }
        stack.pop_back();
        
    }

    int top() {
        if(stack.empty())
        return 0;
        return stack[stack.size()-1];
    }

    int getMin() {
        return min;
    }
};