/**
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Show Company Tags
Show Tags
Show Similar Problems

**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        
        if(root->left==NULL&&root->right==NULL)
        return root->val;
        
        TreeNode *kid;
        if(target<root->val)
        kid=root->left;
        else 
        kid=root->right;
        if(kid==NULL)
        return root->val;
        else
        {
            int candi=closestValue(kid,target);
            if(abs(candi-target)<abs(root->val-target))
            return candi;
            else
            return root->val;
        }
        
    }
};