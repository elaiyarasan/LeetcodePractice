/**
Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37
Credits:
**/
class Solution {
public:
    int compareVersion(string version1, string version2) {
       
        int j=0;
        int k=0;
        while(j<version1.size()||k<version2.size())
        {
            int var1=0;
            while(j<version1.size())
            {
                if(version1[j]=='.')
                {
                    j++;
                    break;
                }
                var1=var1*10+(version1[j]-'0');
                j++;
         
            }
           
            
            int var2=0;
            while(k<version2.size())
            {
              if(version2[k]=='.')
                {
                    k++;
                    break;
                }
                var2=var2*10+(version2[k]-'0');
                k++;
            }
            
          if(var1>var2)
          return 1;
          else if(var1<var2)
          return -1;
        }
        return 0;
    }
};