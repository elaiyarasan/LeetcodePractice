/**
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


**/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
  
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())
        return NULL;
        if(lists.size()==1)
        return lists[0];
        
        int n=lists.size()-1;
        int begin,end=n;
        while(end>0)
        {
            begin=0;
            for(;begin<end;begin++,end--)
            {
                lists[begin]=mergetwolists( lists[begin],lists[end]);
            }
        }
        return lists[0];
    }
    ListNode* mergetwolists(ListNode * list1, ListNode * list2)
    {
        ListNode *head=new ListNode(0);
        ListNode *fakehead=head;
        
        while(list1&&list2)
        {
            if(list1->val>list2->val)
            {
                head->next=list2;
                list2=list2->next;
            }
            else
            {
                head->next=list1;
                list1=list1->next;
            }
            head=head->next;
        }
        if(list1==NULL)head->next=list2;
        if(list2==NULL)head->next=list1;
        head=fakehead->next;
        delete fakehead;
        
        return head;
    }   
   
};