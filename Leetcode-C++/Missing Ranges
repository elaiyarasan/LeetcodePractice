/**
Given a sorted integer array where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"].

 */
 
class Solution {
public:
    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {
            vector<string> res;
            if(nums.size()==0)
            {
                 if(lower==upper)
                {
                 res.push_back(to_string(1));
                 return res;
                }
                else
                {
                    res.push_back(to_string(lower)+"->"+to_string(upper));
                    return res;
                }
            }
            
            if(lower<nums[0])
            {
                if(lower+1!=nums[0])
                res.push_back(to_string(lower)+"->"+to_string(nums[0]-1));
                else
                res.push_back(to_string(lower));
            }
            
            for(int i=0;i<nums.size()-1;i++)
            {
                if(nums[i]+1!=nums[i+1]&&nums[i]+2==nums[i+1])
                res.push_back(to_string(nums[i]+1));
                if(nums[i]+1!=nums[i+1]&&nums[i]+2!=nums[i+1])
                res.push_back(to_string(nums[i]+1)+"->"+to_string(nums[i+1]-1));
            }
            if(upper>nums[nums.size()-1])
            {
                if(upper-1>nums[nums.size()-1])
                res.push_back(to_string(nums[nums.size()-1]+1)+"->"+to_string(upper));
                else
                res.push_back(to_string(upper));
            }
            
            
            return res;
    }
};