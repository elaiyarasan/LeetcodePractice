/**
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.
**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL)
        return head;
        if(head->next==NULL)
        return head;
        ListNode *p1=head,*p2=head->next;
        while(p2!=NULL)
        {
            if(p1->val==p2->val)
            {
                p1->next=p2->next;
                p2=p1->next;
                continue;
            }
            p1=p2;
            p2=p1->next;
        }
        
        return head;
 
    }
};
        
    }
};