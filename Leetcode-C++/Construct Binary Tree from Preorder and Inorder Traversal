/**
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
**/
//**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        int m=inorder.size();
        if(n==0||m==0||m!=n)
        return NULL;
       
        return BuiltTree(preorder,inorder,0,n-1,0,n-1);
       
    }
    TreeNode* BuiltTree(vector<int>& preorder,vector<int> &inorder,int s1,int e1,int s2,int e2)
    {
        if(s1>e1||s2>e2)
        return NULL;
        
        struct TreeNode* root=new TreeNode(preorder[s1]);
        
        int index=-1;
        for(int i=s2;i<=e2;i++)
        {
            if(inorder[i]==root->val)
            {index=i;}
        }
        if (index==-1)
        return NULL;
        int leftsize=index-s2;
        root->left=BuiltTree(preorder,inorder,s1+1,s1+leftsize,s2,index-1);
        root->right=BuiltTree(preorder,inorder,s1+leftsize+1,e1,index+1,e2);
        return root;
    }
};