/**
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> result;
        if(root==NULL)
        return result;
        vector<int> total;
        total.push_back(root->val);
        DFS(root,total,sum-root->val,result);
        return result;
    }
    void DFS(struct TreeNode *root,vector<int> total,int leftsum,vector<vector<int>> &result)
    {
        if(root->left==NULL&&root->right==NULL&&leftsum==0)
        result.push_back(total);
        
        if(root->left!=NULL)
        {
            
            total.push_back(root->left->val);
            DFS(root->left,total,leftsum-root->left->val,result);
            total.pop_back();
        }
        
        if(root->right!=NULL)
        {
           
            total.push_back(root->right->val);
            DFS(root->right,total,leftsum-root->right->val,result);
        }
    }
};