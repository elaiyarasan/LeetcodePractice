/**
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)
**/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> output;
        if(nums.size()==0)
        return output;
        
        int product=1;
        int flag=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]!=0)
           {
                product=product*nums[i];
           }
           if(nums[i]==0)
           flag++;
        }
        for(int i=0;i<nums.size();i++)
        {
            if(flag>=2)
            {
                output.push_back(0);
                
            }
            if(flag==1)
            {
                if(nums[i]!=0)
                output.push_back(0);
                else
                output.push_back(product);
            }
            if(flag==0)
            {
                output.push_back(product/nums[i]);
            }
        }
        return output;
    }
};