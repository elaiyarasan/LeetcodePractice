/**
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        queue<struct TreeNode *> q;
        vector<int> sub;
        if(root==NULL)
        return res;
        q.push(root);
        sub.push_back(root->val);
        res.push_back(sub);
        while(!q.empty())
        {
            int n=q.size();
            vector<int> sub;
            while(n!=0){
            TreeNode *cur=q.front();
            if(cur->left!=NULL){sub.push_back(cur->left->val);q.push(cur->left);}
            if(cur->right!=NULL) {sub.push_back(cur->right->val);q.push(cur->right);}
            q.pop();
            n--;
            }
            if(sub.size()!=0)
            res.push_back(sub);
            
        }
        return res;
        
        
    }
};