/**
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    struct Node{
        struct TreeNode *node;
        int level;
        Node(TreeNode * no,int lel):node(no),level(lel){}
    };
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<struct Node> q;
        vector<int> oo;
        vector<vector<int>> result;
        if (root==NULL)
        return result;
        
        q.push(Node(root,0));
        while(!q.empty())
        {
            struct Node cur=q.front();
            
            if(cur.level==result.size())
            result.push_back(oo);
            
            result[cur.level].push_back(cur.node->val);
            if(cur.node->left!=NULL) q.push(Node(cur.node->left,cur.level+1));
            if(cur.node->right!=NULL) q.push(Node(cur.node->right,cur.level+1));
            q.pop();
        }
        int n=result.size(),j=0;
        vector<vector<int>> final;
        while(j<n)
        {
            final.push_back(oo);
            final[j]=result[n-j-1];
            j++;
        }
        return final; 
    }
};