/**
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

**/
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool cmp(Interval &a,Interval &b)
    {
        return a.start<b.start;
    }
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.size()==0)
        return res;
        sort(intervals.begin(),intervals.end(),cmp);
        Interval add=intervals[0];
        for(int i=1;i<intervals.size();i++)
        {
            if(intervals[i].start>add.end)
            {
                res.push_back(add);
                add=intervals[i];
            }
            else
            {
                int max=add.end;
                if(max<intervals[i].end)
                max=intervals[i].end;
                add=Interval(add.start,max);
            }
        }
        res.push_back(add);
        return res;
        
    }
};