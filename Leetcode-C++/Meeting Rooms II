/**
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.

**/
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 struct comp{
     bool operator()(Interval a,Interval b)
     {
         return a.end>b.end;
     }
 };
class Solution {
    
public:
    static bool cmp(Interval interval1, Interval interval2)
    {
        return interval1.start<=interval2.start;
    }
    int minMeetingRooms(vector<Interval>& intervals) {
        priority_queue<Interval,vector<Interval>,comp> pq;
        int room=0;
        sort(intervals.begin(),intervals.end(),cmp);
        for(int i=0;i<intervals.size();i++)
        {
            if(pq.empty())
            {pq.push(intervals[i]);room++;}
            
            else if(pq.top().end>intervals[i].start)
            {
                pq.push(intervals[i]);
                room++;
            }
            else 
            {
                pq.pop();
                pq.push(intervals[i]);
            }
        }
        return room;
    }
};