/**
	Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.



**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool travesalleft(TreeNode *root,int limit)
    {
        if(root==NULL)
        return false;
        return 
        travesalleft(root->left,limit)||
        root->val>=limit||
        travesalleft(root->right,limit);
    }
    bool travesalright(TreeNode *root,int limit)
    {
        if(root==NULL)
        return false;
        return 
        travesalright(root->left,limit)||
        root->val<=limit||
        travesalright(root->right,limit);
    }
    bool haveonebigger(TreeNode*root){
        int limit=root->val;
        TreeNode *left=root->left;
        return travesalleft(left,limit);
    }

    bool haveoneless(TreeNode*root){
        int limit=root->val;
        TreeNode *right=root->right;
        return travesalright(right,limit);
    }
    bool isValidBST(TreeNode* root) {
        if(root==NULL)
        return true;
        if(root->left!=NULL)
        {
            if(haveonebigger(root))return false;
            if(isValidBST(root->left)==false)
            return false;
        }
        if(root->right!=NULL)
        {
            if(haveoneless(root))return false;
            if(isValidBST(root->right)==false)
            return false;
        }
        return true;
    }
};