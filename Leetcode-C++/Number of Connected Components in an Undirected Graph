/**
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.
**/
class Solution {
public:
    int findflag(int x,vector<int> &flag)
    {
        if(flag[x]==-1)
        return x;
        else
        return findflag(flag[x],flag);
    }
    int countComponents(int n, vector<pair<int, int>>& edges) {
        int m=edges.size();
        if(n==0)
        return 0;
        vector<int> flag(n,-1);
        vector<int> used(n,0);
        int count=0;
        for(int i=0;i<edges.size();i++)
        {
            if(used[edges[i].first]==0&&used[edges[i].second]==0)
                {
                    flag[edges[i].first]=edges[i].second;
                    used[edges[i].first]=1;
                    used[edges[i].second]=1;
                }
            else if(used[edges[i].first]==1&&used[edges[i].second]==0)
                {
                    flag[edges[i].second]=edges[i].first;
                    used[edges[i].second]=1;
                }
            else if(used[edges[i].first]==0&&used[edges[i].second]==1)
                {
                    flag[edges[i].first]=edges[i].second;
                    used[edges[i].first]=1;
                }
            else 
                {
                    if(findflag(edges[i].first,flag)!=findflag(edges[i].second,flag))
                    flag[findflag(edges[i].first,flag)]=findflag(edges[i].second,flag);
                }
        }
        for(int i=0;i<n;i++)
        {
            if(flag[i]==-1)
            count++;
        }

        return count;
    }
};