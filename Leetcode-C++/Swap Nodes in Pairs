/**
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

**/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL)
        return NULL;
        if(head->next==NULL)
        return head;
        ListNode* pre=new ListNode(0);
        ListNode* p1,*p2,*p3=pre;
        p1=head;p2=head->next;
        while(p2!=NULL)
        {
            p3->next=p2;
            p1->next=p2->next;
            p2->next=p1;
            p3=p1;
            
            p1=p3->next;
            if(p1==NULL)
            {
                head=pre->next;
                delete(pre);
                return head;
            }
            p2=p1->next;
        }
        head=pre->next;
        delete(pre);
        return head;
        
        
    }
};