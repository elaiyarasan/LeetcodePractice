/**
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int m=inorder.size();
        int n=postorder.size();
        if(m==0||n==0||m!=n)
        return NULL;
        return BuiltT(inorder,postorder,0,n-1,0,n-1);
    }
    
    TreeNode* BuiltT(vector<int> &inorder,vector<int> &postorder,int s1,int e1,int s2,int e2)
    {
        if(s1>e1||s2>e2)
        return NULL;
        TreeNode* root=new TreeNode(postorder[e2]);
        int index=-1;
        for(int i=0;i<=e1;i++)
        {
            if(inorder[i]==root->val)
            index=i;
        }
        if(index==-1)
        return NULL;
        int leftsize=index-s1,rightsize=e1-index;
        root->left=BuiltT(inorder,postorder,s1,index-1,s2,s2+leftsize-1);
        root->right=BuiltT(inorder,postorder,index+1,e1,e2-rightsize,e2-1);
        return root;
    }
};