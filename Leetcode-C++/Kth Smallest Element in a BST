/**
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Hint:

Try to utilize the property of a BST.
What if you could modify the BST node's structure?
The optimal runtime complexity is O(height of BST).

**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    inline void inordertree(TreeNode *root,vector<int> &res,int &i,int k)
    {
        if(root->left!=NULL)
        inordertree(root->left,res,i,k);
        res.push_back(root->val);
        i++;
        if(i==k)
        return;
        if(root->right!=NULL)
        inordertree(root->right,res,i,k);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> res;
        int i=0;
        inordertree(root,res,i,k);
        return res[k-1];
    }
};