/**
Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?
**/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head||!head->next) return true;
        ListNode *slow=head,*fast=head;
        stack<int> s;
        s.push(slow->val);
        while(fast->next&&fast->next->next)
        {
            slow=slow->next;
            s.push(slow->val);
            fast=fast->next->next;
        }
        if(fast->next==NULL)
        s.pop();
        while(slow->next!=NULL)
        {
            slow=slow->next;
            if(slow->val!=s.top())
            return false;
            s.pop();
        }
        return true;
    }
};