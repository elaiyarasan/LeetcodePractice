/**
A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

Find all strobogrammatic numbers that are of length = n.

For example,
Given n = 2, return ["11","69","88","96"].
**/
/**
(1) No recursion
public class Solution {
    public List<String> findStrobogrammatic(int n) {
        List<String> base=new ArrayList<>();
        if(n==0) return base;
        
        if(n%2==0) base.add("");
        else {
            base=Arrays.asList("0","1","8");
            n-=1;
        }
        for(int i=n;n>0;n-=2){
            List<String> temp=new ArrayList<>();
            for(String s:base){
                if(n!=2)
                temp.add("0"+s+"0");//aviod 0...0
                
                temp.add("1"+s+"1");
                temp.add("6"+s+"9");
                temp.add("8"+s+"8");
                temp.add("9"+s+"6");
            }
            base=temp;
        }
        return base;
    }
}

(2)recursion:
public class Solution {
    public List<String> findStrobogrammatic(int n) {
    return helper(n, n);
}

List<String> helper(int n, int m) {
    if (n == 0) return new ArrayList<String>(Arrays.asList(""));
    if (n == 1) return new ArrayList<String>(Arrays.asList("0", "1", "8"));
    
    List<String> list = helper(n - 2, m);
    
    List<String> res = new ArrayList<String>();
    
    for (int i = 0; i < list.size(); i++) {
        String s = list.get(i);
        
        if (n != m) res.add("0" + s + "0");
        
        res.add("1" + s + "1");
        res.add("6" + s + "9");
        res.add("8" + s + "8");
        res.add("9" + s + "6");
    }
    
    return res;
}
}