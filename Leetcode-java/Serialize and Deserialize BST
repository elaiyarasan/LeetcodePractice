/**
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
  private static final String comma = ",";
    private static final String end = "#";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder() ;
        findPreOrder (root, sb);
        return sb.toString();
    }
    
    public void findPreOrder(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append(end).append(comma);
        }else{
            sb.append(root.val).append(comma);
            findPreOrder(root.left, sb);
            findPreOrder(root.right,sb);
        }
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> nodes = new LinkedList<>();
        nodes.addAll(Arrays.asList(data.split(comma)));
        return buildTree(nodes);
    }
    public TreeNode buildTree(Deque<String> nodes){
        String cur = nodes.remove();
        if(cur.equals(end)){
            return null;
        }else{
            TreeNode root = new TreeNode(Integer.valueOf(cur));
            root.left = buildTree(nodes);
            root.right = buildTree(nodes);
            return root;
        }
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));