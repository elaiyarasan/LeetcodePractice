/**
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
**/
public class Solution {
   public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        
        if (nums.length > 0)
            solve(ans, new int[nums.length], 0, nums, new boolean[nums.length]);
        
        return ans;
    }
    
    private void solve(List<List<Integer>> ans, int[] cur, int cnt, int[] nums, boolean[] used) {
        if (cnt == nums.length) {
            List<Integer> list = new ArrayList<>();
            for (int i: cur) list.add(i);
            ans.add(list);
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                cur[cnt++] = nums[i];
                used[i] = true;
                solve(ans, cur, cnt, nums, used);
                --cnt;
                used[i] = false;
            }
        }
    }
    //想当于在用backtracking 遍历
}