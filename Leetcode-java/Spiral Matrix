/**
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
**/
public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res=new ArrayList<Integer>();
        if(matrix==null||matrix.length==0||matrix[0].length==0)
        return res;
        int m1=0,m2=matrix.length-1;
        int n1=0,n2=matrix[0].length-1;
        
        while(n1<n2&&m1<m2){
            for(int i=n1;i<n2;i++){
                res.add(matrix[m1][i]);
            }
            for(int j=m1;j<m2;j++){
                res.add(matrix[j][n2]);
            }
            for(int i=n2;i>n1;i--){
                res.add(matrix[m2][i]);
            }
            for(int j=m2;j>m1;j--){
                res.add(matrix[j][n1]);
            }
            n1++;
            n2--;
            m1++;
            m2--;
        }
        if(m1==m2)
        {
            for(int i=n1;i<=n2;i++)
            {
                res.add(matrix[m1][i]);
            }
        }
        else if(n1==n2){
            for(int j=m1;j<=m2;j++)
            {
                res.add(matrix[j][n1]);
            }
        }
        return res;
       
    }
}