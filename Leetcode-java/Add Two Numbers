/**
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
**/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res=new ListNode(0);
        ListNode result=res;
        if(l1==null)
        return l2;
        if(l2==null)
        return l1;
        int carry=0;
        while(l1!=null||l2!=null){
            int sum=carry;
            if(l1!=null)
            sum+=l1.val;
            if(l2!=null)
            sum+=l2.val;
       
            if(sum<=9){
                ListNode temp=new ListNode(sum);
                res.next=temp;
                carry=0;
            }
            else{
                ListNode temp=new ListNode(sum%10);
                res.next=temp;
                carry=1;
            }
            res=res.next;
            if(l1!=null)
            l1=l1.next;
            if(l2!=null)
            l2=l2.next;
        }
        if(carry==1)
        res.next=new ListNode(1);
        
        
        return result.next;
    }
}