/**
Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

Note that 1 is typically treated as an ugly number.
**/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
        public int nthUglyNumber(int n) {
        int[] ugly = new int[n+1];
        ugly[1] = 1;
        int num2 = 2, num3 = 3, num5 = 5;
        int index2 = 1, index3 = 1, index5 = 1;
        for(int i = 2; i <= n; ++i) {
            ugly[i] = Math.min(num2, Math.min(num3, num5));
 //because here it is all parallel if statement, therefore when factor2==factor3, they only take one i.Removed duplicate.
            if (num2 == ugly[i]) {++index2;num2 = ugly[index2] * 2;}
            if (num3 == ugly[i]) num3 = ugly[++index3] * 3;
            if (num5 == ugly[i]) num5 = ugly[++index5] * 5;
        }
        return ugly[n];
    }
}

