/**

Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.
**/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Stack<TreeNode> sta=new Stack<TreeNode>();
    
    
    public BSTIterator(TreeNode root) {
        DFS(root);
    }
    public void DFS(TreeNode root){
        if(root==null)
        return;
        DFS(root.right);
        sta.push(root);
        DFS(root.left);
    }
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(!sta.isEmpty())
        return true;
        else 
        return false;
    }

    /** @return the next smallest number */
    public int next() {
       int res= sta.peek().val;
       sta.pop();
       return res;
        
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */