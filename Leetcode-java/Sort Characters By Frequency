/**
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

.**/
/* 
public class Solution {
    
    class Entry{
        char c;
        int count;
        
        public Entry(){
            this.count = 0;
        }
    }
    
    public String frequencySort(String s) {
        
        Entry[] elems = new Entry[256];
        for(int i=0; i<256; i++){
            elems[i] = new Entry();
        }
        
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            elems[c].c = c;
            elems[c].count++;
        }

        Arrays.sort(elems, new Comparator<Entry>(){
           @Override
           public int compare(Entry e1, Entry e2){
               return e2.count - e1.count; // descending order
           }
        });
        
        StringBuilder result = new StringBuilder();
        for(Entry e: elems){
            while(e.count-- > 0)
                result.append(e.c);
        }
        
        return result.toString();
        
    }
}