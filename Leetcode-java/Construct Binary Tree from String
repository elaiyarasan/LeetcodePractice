/**
You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.

Example:
Input: "4(2(3)(1))(6(5))"
Output: return the tree root node representing the following tree:

       4
     /   \
    2     6
   / \   / 
  3   1 5   
Note:
There will only be '(', ')', '-' and '0' ~ '9' in the input string.
An empty tree is represented by "" instead of "()".
Hide Company Tags
In**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode str2tree(String s) {
        Stack<TreeNode> st = new Stack<>();
        if(s == null || s.length() == 0)
        return null;
        for(int i = 0,j = i; i < s.length() ; i++, j = i){
            char c = s.charAt(i);
            if(c == '(')continue;
            else if(c == ')') st.pop();
            else{
                while(i + 1 < s.length() && s.charAt(i + 1) >= '0' && s.charAt(i + 1) <= '9') i++;
                TreeNode curNode = new TreeNode(Integer.valueOf(s.substring(j, i + 1)));
                if(!st.isEmpty()){
                    if(st.peek().left!=null) st.peek().right = curNode;
                    else st.peek().left = curNode;
                }
                st.push(curNode);
            }
        }
        return st.peek();
    }
}