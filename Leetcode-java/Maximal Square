/**
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
**/
/*
    Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.
    
    For example, given the following matrix:
    
    1 0 1 0 0
    1 0 1 1 1
    1 1 1 1 1
    1 0 0 1 0
    Return 4.
*/
public class Solution {
    public int min(int a,int b,int c){
        int res=a;
        if(b<res)res=b;
        if(c<res)res=c;
        return res;
    }
    public int maximalSquare(char[][] matrix) {
        if(null == matrix){
            return -1;
        }
        
        int row = matrix.length;
        if(row < 1) {
            return 0;
        }
    
        int col = matrix[0].length;
        
        int result[][] = new int[row+1][col+1];
        int max=0;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(matrix[i][j] == '1') {
                    result[i+1][j+1] = min(result[i+1][j], result[i][j], result[i][j+1]) + 1;
                
                    max=Math.max(result[i+1][j+1],max);
                }
            }
        }
        
        return (int) Math.pow(max, 2);
    }
}