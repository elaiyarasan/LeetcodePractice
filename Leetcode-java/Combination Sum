/**
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
**/
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        if( candidates.length > 0)
        backtrack(candidates,new ArrayList<Integer>(),target,result,0);
        return result;
    }
    
    private void backtrack(int[] candidates,ArrayList<Integer> list,int target, List<List<Integer>> res,int start){
        if(target==0){ //if isSolution
            res.add(new ArrayList<Integer>(list));//process solution
            return;
        }
       
            for(int i=start;i<candidates.length;i++){
            if(candidates[i] > target) continue;//skip candidates greater than target
            if(i-1>0&&candidates[i]==candidates[i-1]) continue;//remove duplicate
            list.add(candidates[i]);//make a move
            backtrack(candidates,list,target-candidates[i],res,i); //backtrack
            list.remove(list.size()-1);//unmove
        
        }
    }
}
