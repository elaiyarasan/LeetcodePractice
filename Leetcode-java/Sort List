/**
Sort a linked list in O(n log n) time using constant space complexity.
**/



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

//This is quicksort based solution
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
        return head;
        ListNode mid=head,midtail=head;
        ListNode left=new ListNode(0);
        ListNode right=new ListNode(0);
        ListNode lefttail=left;
        ListNode righttail=right;
        ListNode temp=head.next;
        while(temp!=null){
            if(temp.val<midtail.val)
            {
                lefttail.next=temp;
                lefttail=temp;
            }
            else if(temp.val>midtail.val)
            {
                righttail.next=temp;
                righttail=temp;
            }
            else
            {
                midtail.next=temp;
                midtail=temp;
            }
            temp=temp.next;
        }
        lefttail.next=null;
        righttail.next=null;
        
        left.next=sortList(left.next);
        right.next=sortList(right.next);
        
        temp=left;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=mid;
        midtail.next=right.next;
        return left.next;
        
    }
}