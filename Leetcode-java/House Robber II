/**
Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Credits:
Special thanks to @Freezen for adding this problem and creating all test cases.
**/
public class Solution {
    public int rob(int[] nums) {
        if(nums==null||nums.length==0)
        return 0;
        int n=nums.length;
        if(n==1)
        return nums[0];
        if(n==2){
            return Math.max(nums[0],nums[1]);
        }
        int[] opt1=new int[n];//include nums[0];
        opt1[0]=nums[0];
        opt1[1]=nums[1]>nums[0]?nums[1]:nums[0];
        for(int i=2;i<n-1;i++){
            opt1[i]=Math.max(opt1[i-2]+nums[i],opt1[i-1]);
        }
        int[] opt2=new int[n];//not include nums[0]
        opt2[1]=nums[1];
        opt2[2]=nums[1]>nums[2]?nums[1]:nums[2];
        for(int i=3;i<=n-1;i++){
            opt2[i]=Math.max(opt2[i-2]+nums[i],opt2[i-1]);
        }
        int res=opt1[n-2]>opt2[n-1]?opt1[n-2]:opt2[n-1];
        return res;
    }
}