/**
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
.**/
/* 
(1)DP Time Limit Extended
public class Solution {

    public List<String> wordBreak(String s, Set<String> wordDict) {
        if( s==null || s.length() == 0 || wordDict.size() == 0)
        return new ArrayList<String>();
        
        Map<Integer, List<String>> hmap = new HashMap<>();
        List<String> tempsub = new ArrayList<String>();
        tempsub.add("");
        hmap.put(0, tempsub);
  
        for(int i=1;i<=s.length();i++)
        {
            for(int j=0;j<i;j++)
            {
                if(hmap.containsKey(j) && wordDict.contains(s.substring(j,i)))
                {   
                    List<String> temp;
                    if(!hmap.containsKey(i))
                    temp = new ArrayList<>();
                    else 
                    temp = hmap.get(i);
                    for(String st: hmap.get(j)){
                        temp.add(st + (st.equals("") ? "" : " ") + s.substring(j, i));
                    }
                    hmap.put(i, temp);
                } 
                
            }
        }
        if( hmap.get(s.length()) == null){
            return new ArrayList<String>();
        }
        return hmap.get(s.length());
    
    }
}




(2)Recursion with memorization

public class Solution {

    public List<String> wordBreak(String s, Set<String> wordDict) {
        return word_Break(s, wordDict, 0);
    }
    HashMap<Integer, List<String>> map = new HashMap<>();

    public List<String> word_Break(String s, Set<String> wordDict, int start) {
        if (map.containsKey(start)) {
            return map.get(start);
        }
        LinkedList<String> res = new LinkedList<>();
        if (start == s.length()) {
            res.add("");
        }
        for (int end = start + 1; end <= s.length(); end++) {
            if (wordDict.contains(s.substring(start, end))) {
                List<String> list = word_Break(s, wordDict, end);
                for (String l : list) {
                    res.add(s.substring(start, end) + (l.equals("") ? "" : " ") + l);
                }
            }
        }
        map.put(start, res);
        return res;
    }
}