/**
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
**/
/* 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        if(root==null)
        return res;
        LinkedList<TreeNode> que=new LinkedList<>();
        que.add(root);
        while(!que.isEmpty())
        {
            
            LinkedList<TreeNode> temp=new LinkedList<TreeNode>();
            while(!que.isEmpty())
            {
                TreeNode cur=que.poll();
                if(cur.left!=null)
                temp.add(cur.left);
                if(cur.right!=null)
                temp.add(cur.right);
                if(que.isEmpty())
                res.add(cur.val);
            }
            que=temp;
            
        }
        return res;
    }
}

//
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        DFS(result, root, 0);
        return result;
    }
    
    private void DFS(List<Integer> result, TreeNode root, int level){
    	if(root == null){
    		return;
    	}
    	if(level >= result.size()){
    		result.add(root.val);
    	}
    	DFS(result, root.right, level + 1);
    	DFS(result, root.left, level + 1);
    }
}