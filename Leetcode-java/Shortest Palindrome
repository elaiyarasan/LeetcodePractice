/**
Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

For example:

Given "aacecaaa", return "aaacecaaa".

Given "abcd", return "dcbabcd".

Credits:
Special thanks to @ifanchu for adding this problem and creating all test cases. Thanks to @Freezen for additional test cases.
.**/
/* 
(1) My first way: Time Limit ExceedO(n^2)
public class Solution {
    public boolean isPalindrome(String sb){
        if(sb==null||sb.length()==0)
        return true;
        int i=0,j=sb.length()-1;
        while(i<=j){
            if(sb.charAt(i)!=sb.charAt(j))
            return false;
            i++;
            j--;
        }
        return true;
    }
    public String shortestPalindrome(String s) {
        if(s==null||s.length()==0)
        return s;
        int j=s.length();
        String tail=null;
        while(j>=0){
            if(isPalindrome(s.substring(0,j))){
                tail=s.substring(j);
                break;
            }
            j--;
        }
        return new StringBuffer(tail).reverse().toString()+s;
    }
}

(2) Optimized Way:O(n)
public class Solution {
    public String shortestPalindrome(String s) {
    int j = 0;
    for (int i = s.length() - 1; i >= 0; i--) {
        if (s.charAt(i) == s.charAt(j)) { j += 1; }
    }
    if (j == s.length()) { return s; }
    String suffix = s.substring(j);
    return new StringBuffer(suffix).reverse().toString() + shortestPalindrome(s.substring(0, j)) + suffix;
    }
}