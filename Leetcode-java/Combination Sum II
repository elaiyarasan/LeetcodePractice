Combination SumII

/**
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
**/
public class Solution {
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        combSum_recursion(0, target, nums, list, res);
        return res;
    }
    
    void combSum_recursion(int index, int target, int[] nums, List<Integer> list, List<List<Integer>> res){
        if(target==0){
            res.add(new ArrayList<Integer>(list));
        } else if(target>0){
            for(int i=index; i<nums.length; i++){
                list.add(nums[i]);
                combSum_recursion(i+1, target-nums[i], nums, list, res);
                list.remove(list.size()-1);
                while(i<nums.length-1 && nums[i]==nums[i+1]) i++;
            }
        }// else target<0: do nothing, just return
    }
}
