/**
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
**/
/**
(1)Heap, PriorityQueue.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null||lists.length==0) return null;
        
        PriorityQueue<ListNode> queue= new PriorityQueue<ListNode>(lists.length,new Comparator<ListNode>(){
            @Override
            public int compare(ListNode o1,ListNode o2){
                 return o1.val-o2.val;
            }
        });
        
        ListNode dummy = new ListNode(0);
        ListNode tail=dummy;
        
        for (ListNode node:lists)
            if (node!=null)
                queue.add(node);
            
        while (!queue.isEmpty()){
            tail.next=queue.poll();
            tail=tail.next;
            
            if (tail.next!=null)
                queue.add(tail.next);
        }
        return dummy.next;
    }
}

(2)divide and conquer
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        List<ListNode> res=new ArrayList<>();
        for(ListNode list:lists){
            res.add(list);
        }
        return mergeKLists(res);

    }
    public ListNode mergeKLists(List<ListNode> lists){
        if(lists==null||lists.size()==0) return null;
        if(lists.size()==1)return lists.get(0);
        if(lists.size()==2) return merge2Lists(lists.get(0),lists.get(1));
        return merge2Lists(mergeKLists(lists.subList(0,lists.size()/2)),
        mergeKLists(lists.subList(lists.size()/2,lists.size())));
    }
    public ListNode merge2Lists(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        ListNode fake=new ListNode(0);
        ListNode head=fake;
        while(l1!=null&&l2!=null){
            if(l1.val<l2.val){
                head.next=l1;
                head=head.next;
                l1=l1.next;
            }
            else{
                head.next=l2;
                head=head.next;
                l2=l2.next;
            }
        }
        if(l1==null)head.next=l2;
        else if(l2==null) head.next=l1;
        return fake.next;
    }
}