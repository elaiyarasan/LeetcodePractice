
/**
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
**/

/**
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
    //memorized search should not be used here! 

  
    List<TreeNode> ans = new ArrayList<>();
    if (n == 0) {
        return ans;
    }
    return helper(1, n);
}
private List<TreeNode> helper(int start, int end) {
    List<TreeNode> ans = new ArrayList<>();
    if (start > end) {
        ans.add(null);
        return ans;
    }
    for (int i = start; i <= end; i++) {
        List<TreeNode> leftNodes = helper(start, i - 1);
        List<TreeNode> rightNodes = helper(i + 1, end);
        for (TreeNode left : leftNodes) {
            for (TreeNode right : rightNodes) {
                TreeNode root = new TreeNode(i);   // Pay attention here!
                root.left = left;
                root.right = right;
                ans.add(root);
            }
        }
    }
    return ans;
}
}