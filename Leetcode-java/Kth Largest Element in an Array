/**
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

Credits:
Special thanks to @mithmatt for adding this problem and creating all test cases.

**/
/**
Notice:List<Integer> s=new ArrayList<Integer>( res.get(j));
This means create a new space s and give res.get(j) as its value.
This is different from: 
List<Integer> s=new ArrayList<Integer>();
s=res.get(j);
This means use s as a reference of res.get(j),s is not a new space.
**/
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minheap=new PriorityQueue<Integer>();
        for(int i=0;i<nums.length;i++)
        {
            if(minheap.size()<k)
            {
                minheap.add(nums[i]);
            }
            else{
                if(nums[i]>minheap.peek())
                {
                    minheap.poll();
                    minheap.add(nums[i]);
                }
            }
        }
        return minheap.peek();
        
        
    }
}

//quick sort
public class Solution {
    public int findKthLargest(int[] nums, int k) {
       
    Arrays.sort(nums);
    return nums[nums.length-k];
    }
}