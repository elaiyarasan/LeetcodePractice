/**

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
**/
//(1)divide and conquer
public class Solution {
    public int maxSubArray(int[] nums) {
         return divide(nums, 0, nums.length-1); 
    }
    
  public int divide(int A[], int low, int high){  
        if(low == high)
            return A[low];  
        if(low == high-1)  
            return Math.max(A[low]+A[high], Math.max(A[low], A[high]));
            
        int mid = (low+high)/2;  
        int lmax = divide(A, low, mid-1);  
        int rmax = divide(A, mid+1, high); 
        
        int mmax = A[mid];  
        int tmp = mmax;  
        for(int i = mid-1; i >=low; i--){  
            tmp += A[i];  
            if(tmp > mmax)
                mmax = tmp;  
        }  
        tmp = mmax;  
        for(int i = mid+1; i <= high; i++){  
            tmp += A[i];  
            if(tmp > mmax)
                mmax = tmp;  
        }  
        return Math.max(mmax, Math.max(lmax, rmax));  
          
    }

}
//(2)Kadane
public class Solution {
    public int maxSubArray(int[] nums) {
        int[] A=nums;
        int max_ending_here = 0;
        int max_so_far = Integer.MIN_VALUE;
        
        for(int i = 0; i < A.length; i++){  
            if(max_ending_here < 0) 
                 max_ending_here = 0;  
            max_ending_here += A[i];  
            max_so_far = Math.max(max_so_far, max_ending_here);   
        }  
        return max_so_far; 
    }

}
//(3)DP
public class Solution {
    public int maxSubArray(int[] nums) {
        int[] sum=new int[nums.length];
        int max=nums[0];
        sum[0]=nums[0];
        for(int i=1;i<nums.length;i++){
            sum[i]=Math.max(sum[i-1]+nums[i],nums[i]);
            max=Math.max(max,sum[i]);
        }
        return max;
    }
}

