/**
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
**/
/**
public class Solution {
    
    public int[] searchRange(int[] nums, int target) {
        int[] range=new int[2];
        range[0]=(findLeftMost(nums, nums.length, target));
        range[1]=(findRightMost(nums, nums.length, target));
        return range;
    }
    int findLeftMost(int A[], int n, int target) {
        int start = 0, end = n-1;
        while(start<=end) {
            int mid = start + (end-start)/2;
            if(target<A[mid])
                end = mid-1;
            else if(target>A[mid])
                start = mid+1;
            else
                end = mid-1;
        }
        if(start>=0 && start<n && A[start]==target) return start;
        return -1;
    }
    int findRightMost(int A[], int n, int target) {
        int start = 0, end = n-1;
        while(start<=end) {
            int mid = start + (end-start)/2;
            if(target<A[mid])
                end = mid-1;
            else if(target>A[mid])
                start = mid+1;
            else
                start = mid+1;
        }
        if(end>=0 && end<n && A[end]==target) return end;
        return -1;
    }
}