/**
Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
/**
class Solution {
    public int[][] imageSmoother(int[][] M) {
        if(M == null || M.length == 0 || M[0].length == 0)
            return null;
        int[][] res = new int[M.length][M[0].length];
        int[] x = {1, -1, 0, 0, 1, -1, 1, -1};
        int[] y = {0, 0, 1, -1, 1, -1, -1, 1};
        for(int i = 0; i < M.length; i++){
            for(int j = 0; j < M[0].length; j++){
                int accu = M[i][j], count = 1;
                for(int k = 0; k < 8; k++){
                    if(i + x[k] < 0 || i + x[k] >= M.length || j + y[k] < 0 || j + y[k] >= M[0].length){
                        continue;
                    }
                    count++;
                    accu += M[i+x[k]][j+y[k]];
                }
                res[i][j] = accu/count; 
            }
        }
        return res;
        
    }
}