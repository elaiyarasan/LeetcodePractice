Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples: 
[2,3,4] , the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
For example:

add(1)
add(2)
findMedian() -> 1.5
add(3) 
findMedian() -> 2

/**
class MedianFinder {
    private PriorityQueue<Integer> minH;
    private PriorityQueue<Integer> maxH;
    
    MedianFinder(){
        minH = new PriorityQueue<Integer>();
        maxH = new PriorityQueue<Integer>(1, new Comparator<Integer>(){
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
    }
    
    
    // Adds a number into the data structure.
    public void addNum(int num) {
        if ((minH.size()==0)&&(maxH.size()==0)) minH.add(num);
        else if ((minH.size())>(maxH.size())) {
            if (num>minH.peek()) {
                maxH.add(minH.poll());
                minH.add(num);
            } else maxH.add(num);
        } else if ((minH.size())<(maxH.size())) {
            if (num<maxH.peek()) {
                minH.add(maxH.poll());
                maxH.add(num);
            } else minH.add(num);            
        } else {
            if (num<maxH.peek()) maxH.add(num);
            else minH.add(num);             
        }
    }

    // Returns the median of current data stream
    public double findMedian() {// Notice here we use peek(), not poll().
        if ((minH.size()==0)&&(maxH.size()==0)) return 0.0;
        if ((minH.size())>(maxH.size())) return (double)(minH.peek());
        if ((minH.size())<(maxH.size())) return (double)(maxH.peek());
        return ((double)(maxH.peek()+minH.peek()))/2.0;
    }
};

// Your MedianFinder object will be instantiated and called as such:
// MedianFinder mf = new MedianFinder();
// mf.addNum(1);
// mf.findMedian();