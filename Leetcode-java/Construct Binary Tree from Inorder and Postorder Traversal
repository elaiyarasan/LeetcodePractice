/**
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.Special thanks to @dietpepsi for adding this problem and creating all test cases.
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildtree(int[] inorder, int s1,int e1,int[] postorder,int s2,int e2){
        if(s1>e1||s2>e2)
        return null;
        TreeNode node=new TreeNode(postorder[e2]);
        int index=-1;
        for(int i=s1;i<=e1;i++){
            if(inorder[i]==postorder[e2])
            index=i;
        }
        if(index==-1)
        return null;
        int right=e1-index;
        node.right=buildtree(inorder,index+1,e1,postorder,e2-right,e2-1);
        node.left=buildtree(inorder,s1,index-1,postorder,s2,e2-right-1);
        return node;
        
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n=inorder.length;
        if(inorder==null||postorder==null||n!=postorder.length)
        return null;
        return buildtree(inorder,0,n-1,postorder,0,n-1);
    }
}
