/**
Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37
**/

public class Solution {
    public int compareVersion(String version1, String version2) {
        int i=0;
        int j=0;
        while(i<version1.length()||j<version2.length()){
            int var1=0;
            int var2=0;
            while(i<version1.length()){
                if(version1.charAt(i)=='.')
                {
                    i++;
                    break;
                }
                var1=10*var1+(version1.charAt(i)-'0');
                i++;
            }
            while(j<version2.length()){
                if(version2.charAt(j)=='.')
                {
                    j++;
                    break;
                }
                var2=10*var2+(version2.charAt(j)-'0');
                j++;
            }
            if(var1<var2)
            return -1;
            else if(var1>var2)
            return 1;
        }
        return 0;
    }
}