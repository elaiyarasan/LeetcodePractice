/**
Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.
Example:
Input: s = "abcdefg", k = 2
Output: "bacdfeg"
Restrictions:
The string consists of lower English letters only.
Length of the given string and k will in the range [1, 10000]
**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public String reverseStr(String s, int k) {
        int flag = 1;
        char[] res = s.toCharArray();
        for(int i = 0; i < s.length(); ){
            int l = i + k -1;
            if(i + k -1 >= s.length())
                l = s.length()-1;
            for(int j = i; j < l; j++, l--){
                char temp = res[j];
                res[j] = res[l];
                res[l] = temp;
            }
            i += 2*k;
        }
        return new String(res);
    }
}