/**
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
.**/
/* 
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> res = new ArrayList<>();
        if(intervals == null || intervals.size() == 0)
        return res;
        Collections.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval o1, Interval o2){
                return o1.start - o2.start;
            }
        });
        int start = intervals.get(0).start, end = intervals.get(0).end;
        int i = 1;
        while(i < intervals.size()){
            if(intervals.get(i).start > end){
                res.add(new Interval(start, end));
                start = intervals.get(i).start;
            }
            if(end < intervals.get(i).end)
                end = intervals.get(i).end;
            
            i++;
        }
        res.add(new Interval(start, end));
        return res;
    }
}