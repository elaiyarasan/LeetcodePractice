Flatten 2D Vector

/**
Implement an iterator to flatten a 2d vector.

For example,
Given 2d vector =

[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].

**/
(1) Use coordinate
public class Vector2D implements Iterator<Integer> {
    List<List<Integer>> vec;
    int x=0;
    int y=0;
    public Vector2D(List<List<Integer>> vec2d) {
        vec=vec2d;
    }

    @Override
    public Integer next() {
        while(x<vec.size()&&y==vec.get(x).size()){
            x++;
            y=0;
        }
        return vec.get(x).get(y++);
    }

    @Override
    public boolean hasNext() {
        int x0=x;
        int y0=y;
        while(x0<vec.size()&&y0==vec.get(x0).size()){
            x0++;
            y0=0;
        }
        return x0<vec.size();
    }
}

//(2)Use iterator
public class Vector2D implements Iterator<Integer> {
    Queue<Iterator<Integer>> queue;
    public Vector2D(List<List<Integer>> vec2d) {
        this.queue=new LinkedList<Iterator<Integer>>();
        for(List<Integer> line:vec2d){
            if(line.iterator().hasNext()){
                queue.offer(line.iterator());
            }
        }
    }

    @Override
    public Integer next() {
       Integer res = queue.peek().next();
       
       while(!queue.isEmpty()&&!queue.peek().hasNext())
      {
        queue.remove(); 
      }
        
          return res;
    }

    @Override
    public boolean hasNext() {
        return !queue.isEmpty();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */