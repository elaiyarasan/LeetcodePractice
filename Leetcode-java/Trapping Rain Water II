/**
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.
**/
/* 
public class Solution {
    class Cell{
        int x;
        int y;
        int val;
        public Cell(int x,int y, int val){
            this.x = x;
            this.y = y;
            this.val = val;
        }
    }
    int[][] heightMap;
    int[] lx = {0,0,-1,1};
    int[] ly = {1,-1,0,0};
    boolean [][] visited;
    int water = 0;
    PriorityQueue<Cell> walls = new PriorityQueue<>(new Comparator<Cell>(){
        @Override
        public int compare(Cell o1, Cell o2){
            return o1.val - o2.val;
        }
    });
    
    
    public int trapRainWater(int[][] heightMap) {
        this.heightMap = heightMap;
        if(heightMap == null || heightMap.length == 0 || heightMap[0].length == 0)
        return 0;
        initialize();
        while(!walls.isEmpty()){
            Cell min = walls.poll();
            traversal(min);
        }
        return water;
        
    }
    public void fill(int x, int y, int minWall){
        if( x < 0 || y < 0 || x >= heightMap.length || y >= heightMap[0].length)
        return;
        if(visited[x][y] == true)
        return;
        if(heightMap[x][y] > minWall){
            walls.add(new Cell(x,y, heightMap[x][y]));
            visited[x][y] = true;
            return;
        }
        else{
            water += minWall - heightMap[x][y];
            visited[x][y] = true;
            traversal(new Cell(x,y,minWall));
        }
    }
    public void traversal(Cell start){
        for(int k = 0 ; k < 4 ; k ++ ){
            int i = start.x + lx[k];
            int j = start.y + ly[k];
            fill(i,j,start.val);
        }
    }
    public void initialize(){
        int rows = heightMap.length, cols = heightMap[0].length;
        visited = new boolean[rows][cols];
        for(int i = 0 ; i < cols ; i++){
            walls.add(new Cell(0,i,heightMap[0][i]));
            walls.add(new Cell(rows-1,i, heightMap[rows-1][i]));
            visited[0][i] = true;
            visited[rows-1][i] = true;
        }
        for(int i = 1 ; i < rows -1; i++ ){
            walls.add(new Cell(i,0, heightMap[i][0]));
            walls.add(new Cell(i,cols -1, heightMap[i][cols-1]));
            visited[i][0] = true;
            visited[i][cols-1] = true;
        }
    }
}