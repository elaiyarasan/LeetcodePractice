/**
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

**/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode p1=head,p2=head;
        if(head==null)
        return null;
        if(p2.next==null)
            return null;
        while(p2.next!=null)
        {
            p1=p1.next;
            p2=p2.next;
            if(p2.next==null)
            return null;
            p2=p2.next;
            if(p1==p2)
            break;
            if(p2.next==null)
            return null;
            
        }
        p1=head;
        while(p1!=p2)
        {
            p1=p1.next;
            p2=p2.next;
        }
        return p1;
    }
}